{"version":3,"sources":["webpack:///./src/pages/glossary.js","webpack:///./src/components/list-with-heading.js"],"names":["converter","showdown","Converter","Glossary","location","glossaryData","useStaticQuery","useState","viewportSize","setViewportSize","queries","small","medium","large","onChange","matches","title","className","classnames","edges","map","node","frontmatter","html","items","glossaryUsages","key","id","href","dangerouslySetInnerHTML","__html","cls","headingTemplate","length","itemTemplate","item","slug","makeHtml","name","ListWithHeading","defaultProps","heading"],"mappings":"8FAAA,mJAUMA,EAAY,IAVlB,OAUsBC,EAASC,WA4FhBC,UA1FE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACXC,EAAiBC,yBAAe,cAAhCD,aAD0B,EA2BME,mBAAS,IAA1CC,EA3B2B,KA2BbC,EA3Ba,KAwClC,OACC,kBAAC,IAAD,CAAQL,SAAUA,GACjB,kBAAC,IAAD,CACCM,QAAS,CACRC,MAAO,qBACPC,OAAQ,6CACRC,MAAO,uBAERC,SApBwB,SAAAC,GAC1B,OAAIA,EAAQJ,MACJF,EAAgB,MAGpBM,EAAQH,OACJH,EAAgB,MAGjBA,EAAgB,SAatB,kBAAC,IAAD,CAAKO,MAAM,aACX,6BAASC,UAAU,iBAClB,wCACA,6BAASA,UAAWC,IAAW,UAAWV,IACxCH,EAAac,MAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAClBC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KACfC,EAAQC,EAAe,IAAIH,EAAYI,KAC7C,OACC,6BAASA,IAAKJ,EAAYI,KACzB,iCACC,uBAAGC,GAAIL,EAAYI,IAAKE,KAAI,IAAMN,EAAYI,KAC7C,4BAAKJ,EAAYN,QAElB,yBAAKa,wBAAyB,CAAEC,OAAQP,MAEzC,kBAAC,IAAD,CACCQ,IAAG,aACHC,gBAAiB,kBAAM,+CAAqBR,EAAQA,EAAMS,OAAS,IAA5C,MACvBC,aAAc,SAAAC,GAAI,OACjB,wBAAIT,IAAKS,EAAKC,MACb,uBAAGR,KAAI,IAAMO,EAAKC,MACjB,0BACCP,wBAAyB,CACxBC,OAAQ9B,EAAUqC,SAASF,EAAKG,YAMrCd,MAAOC,EAAe,IAAIH,EAAYI,gB,2DC3F/C,yBAGMa,EAAkB,SAAC,GAAwD,IAAtDR,EAAqD,EAArDA,IAAKC,EAAgD,EAAhDA,gBAAiBE,EAA+B,EAA/BA,aAA+B,IAAjBV,aAAiB,MAAT,GAAS,EAC/E,OACC,yBAAKP,UAAWc,GAEdC,MAEER,IAAUA,EAAMS,SAAW,yBAAKhB,UAAU,QAAf,WAE7BO,EAAMS,OAAS,GAAK,4BAAKT,EAAMJ,KAAI,SAAAe,GAAI,OAAID,EAAaC,SAY5DI,EAAgBC,aAAe,CAC9BT,IAAI,GACJU,QAAQ,GACRjB,MAAO,IAGOe","file":"component---src-pages-glossary-js-7f77e47e3a50de290949.js","sourcesContent":["import './glossary.scss'\nimport React, { useState } from 'react'\nimport classnames from 'classnames'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport ReactMedia from 'react-media'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport glossaryUsages from './../../_data/glossary-usages.json'\nimport ListWithHeading from '../components/list-with-heading'\nimport showdown from 'showdown'\nconst converter = new showdown.Converter()\n\nconst Glossary = ({ location }) => {\n\tconst { glossaryData } = useStaticQuery(\n\t\tgraphql`\n\t\t\tquery {\n\t\t\t\tglossaryData: allMarkdownRemark(\n\t\t\t\t\tsort: { fields: [frontmatter___title], order: ASC }\n\t\t\t\t\tfilter: { fields: { markdownType: { eq: \"glossary\" } } }\n\t\t\t\t) {\n\t\t\t\t\tedges {\n\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\thtml\n\t\t\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfields {\n\t\t\t\t\t\t\t\tmarkdownType\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texcerpt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`\n\t)\n\n\tconst [viewportSize, setViewportSize] = useState(``)\n\tconst onMediaQueryChange = matches => {\n\t\tif (matches.small) {\n\t\t\treturn setViewportSize(`sm`)\n\t\t}\n\n\t\tif (matches.medium) {\n\t\t\treturn setViewportSize(`md`)\n\t\t}\n\n\t\treturn setViewportSize(`lg`)\n\t}\n\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<ReactMedia\n\t\t\t\tqueries={{\n\t\t\t\t\tsmall: '(max-width: 599px)',\n\t\t\t\t\tmedium: '(min-width: 600px) and (max-width: 1199px)',\n\t\t\t\t\tlarge: '(min-width: 1200px)',\n\t\t\t\t}}\n\t\t\t\tonChange={onMediaQueryChange}\n\t\t\t/>\n\t\t\t<SEO title=\"Glossary\" />\n\t\t\t<section className=\"page-glossary\">\n\t\t\t\t<h1>Glossary</h1>\n\t\t\t\t<section className={classnames('listing', viewportSize)}>\n\t\t\t\t\t{glossaryData.edges.map(({ node }) => {\n\t\t\t\t\t\tconst { frontmatter, html } = node\n\t\t\t\t\t\tconst items = glossaryUsages[`#${frontmatter.key}`]\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<article key={frontmatter.key}>\n\t\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t\t<a id={frontmatter.key} href={`#${frontmatter.key}`}>\n\t\t\t\t\t\t\t\t\t\t<h2>{frontmatter.title}</h2>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: html }} />\n\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t<ListWithHeading\n\t\t\t\t\t\t\t\t\tcls={`used-rules`}\n\t\t\t\t\t\t\t\t\theadingTemplate={() => <h3>Used In Rules: ({items ? items.length : '0'})</h3>}\n\t\t\t\t\t\t\t\t\titemTemplate={item => (\n\t\t\t\t\t\t\t\t\t\t<li key={item.slug}>\n\t\t\t\t\t\t\t\t\t\t\t<a href={`/${item.slug}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t__html: converter.makeHtml(item.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\titems={glossaryUsages[`#${frontmatter.key}`]}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</article>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</section>\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default Glossary\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ListWithHeading = ({ cls, headingTemplate, itemTemplate, items = [] }) => {\n\treturn (\n\t\t<div className={cls}>\n\t\t\t{/* title  */}\n\t\t\t{headingTemplate()}\n\t\t\t{/* when there are no items, show a no data note  */}\n\t\t\t{(!items || !items.length) && <div className=\"note\">No Data</div>}\n\t\t\t{/* render items if they exist  */}\n\t\t\t{items.length > 0 && <ul>{items.map(item => itemTemplate(item))}</ul>}\n\t\t</div>\n\t)\n}\n\nListWithHeading.propTypes = {\n\tcls: PropTypes.string,\n\theadingTemplate: PropTypes.func.isRequired,\n\titemTemplate: PropTypes.func.isRequired,\n\titems: PropTypes.array,\n}\n\nListWithHeading.defaultProps = {\n\tcls: ``,\n\theading: ``,\n\titems: [],\n}\n\nexport default ListWithHeading\n"],"sourceRoot":""}