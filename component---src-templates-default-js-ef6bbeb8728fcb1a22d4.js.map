{"version":3,"sources":["webpack:///./src/templates/default.js"],"names":["location","data","markdownRemark","site","glossaryData","url","JSON","parse","siteMetadata","actRulesPackage","www","html","frontmatter","glossaryPaths","edges","reduce","out","key","node","title","className","dangerouslySetInnerHTML","__html","content","baseUrl","replace","match","glossaryKey","toLowerCase","Object","keys","includes","value","linkUpGlossaryTerms","query"],"mappings":"4FAAA,wGAOe,sBAAyB,IAAtBA,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACnBC,EAAuCD,EAAvCC,eAAgBC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,aAEtBC,EACJC,KAAKC,MAAMJ,EAAKK,aAAaC,iBADhCC,IAAOL,IAEAM,EAAsBT,EAAtBS,KAAMC,EAAgBV,EAAhBU,YAsBRC,EAAgBT,EAAaU,MAAMC,QAAO,SAACC,EAAD,GAAoB,IAEnDC,EAFkD,EAAXC,KAEtDN,YAAeK,IAGhB,OADAD,EAAIC,GAAJ,aAAwBA,EACjBD,IACL,IAEH,OACC,kBAAC,IAAD,CAAQhB,SAAUA,GACjB,kBAAC,IAAD,CAAKmB,MAAOP,EAAYO,QACxB,6BAASC,UAAU,gBAClB,4BAAKR,EAAYO,OACjB,yBACCE,wBAAyB,CACxBC,OAnCuB,SAACC,EAAStB,GACrC,IAAKA,EACJ,OAAOsB,EAER,IAAMC,EAA4EnB,EAClF,OAAOkB,EAAQE,QAAQ,kBAAkB,SAACC,EAAOT,GAChD,IAAMU,EAAW,IAAOV,EAAIW,cAC5B,IAAKC,OAAOC,KAAK7B,GAAM8B,SAASJ,GAC/B,OAAOD,EAGR,IAAMM,EAAQ/B,EAAK0B,GACnB,YAAqB,IAAVK,EACHN,EAGF,UAAWF,EAAjB,IAA4BQ,EAA5B,OAmBWC,CAAoBtB,EAAME,SAQjC,IAAMqB,EAAK,c","file":"component---src-templates-default-js-ef6bbeb8728fcb1a22d4.js","sourcesContent":["import React from 'react'\nimport Layout from '../components/layout'\nimport { graphql } from 'gatsby'\nimport SEO from '../components/seo'\n\nimport './default.scss'\n\nexport default ({ location, data }) => {\n\tconst { markdownRemark, site, glossaryData } = data\n\tconst {\n\t\twww: { url },\n\t} = JSON.parse(site.siteMetadata.actRulesPackage)\n\tconst { html, frontmatter } = markdownRemark\n\n\tconst linkUpGlossaryTerms = (content, data) => {\n\t\tif (!data) {\n\t\t\treturn content\n\t\t}\n\t\tconst baseUrl = process.env.NODE_ENV === `development` ? window.location.origin : url\n\t\treturn content.replace(/href=\"#(.*?)\"/g, (match, key) => {\n\t\t\tconst glossaryKey = `#${key.toLowerCase()}`\n\t\t\tif (!Object.keys(data).includes(glossaryKey)) {\n\t\t\t\treturn match\n\t\t\t}\n\n\t\t\tconst value = data[glossaryKey]\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\treturn match\n\t\t\t}\n\n\t\t\treturn `href=\" ${baseUrl}/${value}\"`\n\t\t})\n\t}\n\n\tconst glossaryPaths = glossaryData.edges.reduce((out, { node }) => {\n\t\tconst {\n\t\t\tfrontmatter: { key },\n\t\t} = node\n\t\tout[key] = `glossary/#${key}`\n\t\treturn out\n\t}, {})\n\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO title={frontmatter.title} />\n\t\t\t<section className=\"page-default\">\n\t\t\t\t<h1>{frontmatter.title}</h1>\n\t\t\t\t<div\n\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html: linkUpGlossaryTerms(html, glossaryPaths),\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport const query = graphql`\n\tquery($slug: String!) {\n\t\tmarkdownRemark(fields: { slug: { eq: $slug } }) {\n\t\t\thtml\n\t\t\tfrontmatter {\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t\tglossaryData: allMarkdownRemark(\n\t\t\tsort: { fields: [frontmatter___title], order: ASC }\n\t\t\tfilter: { fields: { markdownType: { eq: \"glossary\" } } }\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\thtml\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tkey\n\t\t\t\t\t}\n\t\t\t\t\tfields {\n\t\t\t\t\t\tmarkdownType\n\t\t\t\t\t}\n\t\t\t\t\texcerpt\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsite {\n\t\t\tsiteMetadata {\n\t\t\t\tactRulesPackage\n\t\t\t}\n\t\t}\n\t}\n`\n"],"sourceRoot":""}