{"version":3,"sources":["webpack:///./src/components/rule-header.js","webpack:///./src/templates/implementer.js","webpack:///./src/templates/implementer-incomplete.js","webpack:///./src/components/table-testcase-findings.js","webpack:///./src/components/list-of-implementations.js","webpack:///./src/components/badge.js"],"names":["RuleHeader","ruleId","ruleName","children","converter","showdown","Converter","className","to","id","dangerouslySetInnerHTML","__html","makeHtml","Implementer","location","data","implementerData","sitePage","context","JSON","parse","organisation","toolName","actMapping","description","title","completeMaps","filterByConsistency","incompleteMaps","length","allRules","edges","map","node","frontmatter","name","rule_type","impl","find","isIncomplete","key","data-rule-id","value","consistency","mapping","showIncomplete","body","query","items","values","filter","includes","ImplementerIncomplete","fastmatterAttributes","fields","accessibility_requirements","ruleScs","Object","keys","split","pop","sc","replace","completeImpl","type","TableTestcaseFindings","implementations","defaultFilter","index","implementationId","result","findings","url","testcase","expected","actual","actuals","relativeUrl","getHyphenatedString","groupFindingsOfImplementations","ListOfImplementations","cls","getPageContent","Badge"],"mappings":"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","file":"component---src-templates-implementer-incomplete-js-47b0a544e3c7239d98c1.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport showdown from 'showdown'\n\nimport './rule-header.scss'\n\nconst RuleHeader = ({ ruleId, ruleName, children }) => {\n\tconst converter = new showdown.Converter()\n\n\treturn (\n\t\t<div className=\"ruleHeader\">\n\t\t\t<Link to={`/rules/${ruleId}`}>\n\t\t\t\t<h2 id={`id-${ruleId}`} dangerouslySetInnerHTML={{ __html: converter.makeHtml(ruleName) }}></h2>\n\t\t\t</Link>\n\t\t\t<div className=\"childContainer\">{children}</div>\n\t\t</div>\n\t)\n}\n\nRuleHeader.propTypes = {\n\truleId: PropTypes.string.isRequired,\n\truleName: PropTypes.string.isRequired,\n}\n\nexport default RuleHeader\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport ListOfImplementations from '../components/list-of-implementations'\nimport RuleHeader from '../components/rule-header'\nimport Badge from '../components/badge'\nimport Note from '../components/note'\n\nimport './implementer.scss'\n\nconst Implementer = ({ location, data }) => {\n\tconst { implementerData } = data.sitePage.context\n\tconst { organisation, toolName, actMapping, description } = JSON.parse(implementerData)\n\n\tconst title = `Implementation report of ${toolName} (${organisation})`\n\tconst completeMaps = filterByConsistency(actMapping, ['consistent', 'partially-consistent'])\n\tconst incompleteMaps = filterByConsistency(actMapping, ['inconsistent'])\n\n\tif (!completeMaps || !completeMaps.length) {\n\t\treturn (\n\t\t\t<Layout location={location}>\n\t\t\t\t<SEO title={title} />\n\t\t\t\t<section className=\"page-implementer\">\n\t\t\t\t\t<h1>{title}</h1>\n\t\t\t\t\t<Note\n\t\t\t\t\t\ttitle={`Insufficient implementation data`}\n\t\t\t\t\t\tbody={`There are no known implementations. This is likely because the rule has been updated and the implementation report has not yet been updated.`}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t</Layout>\n\t\t)\n\t}\n\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO title={title} />\n\t\t\t<section className=\"page-implementer\">\n\t\t\t\t{/* title  */}\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t{/* desc  */}\n\t\t\t\t{description && <p>{description}</p>}\n\t\t\t\t{/* impl  */}\n\t\t\t\t{data.allRules.edges.map(({ node }) => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tfrontmatter: { id, name, rule_type },\n\t\t\t\t\t} = node\n\n\t\t\t\t\tconst impl = completeMaps.find(({ ruleId }) => ruleId === id)\n\t\t\t\t\tconst isIncomplete = incompleteMaps.find(({ ruleId }) => ruleId === id)\n\n\t\t\t\t\tif (!impl && isIncomplete) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!impl) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * show complete implementation tabulation\n\t\t\t\t\t */\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"cardItem\" key={id} data-rule-id={id}>\n\t\t\t\t\t\t\t<RuleHeader ruleId={id} ruleName={name}>\n\t\t\t\t\t\t\t\t<Badge title={`Id:`} value={id} />\n\t\t\t\t\t\t\t\t<Badge title={`Type:`} value={rule_type} />\n\t\t\t\t\t\t\t\t<Badge title={`Consistency:`} value={impl.consistency} />\n\t\t\t\t\t\t\t</RuleHeader>\n\t\t\t\t\t\t\t<ListOfImplementations mapping={[impl]} showIncomplete={false} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default Implementer\n\nexport const query = graphql`\n\tquery($path: String) {\n\t\tsitePage(path: { eq: $path }) {\n\t\t\tcontext {\n\t\t\t\tfilename\n\t\t\t\ttitle\n\t\t\t\timplementerData\n\t\t\t}\n\t\t}\n\t\tallRules: allMarkdownRemark(\n\t\t\tsort: { fields: [frontmatter___name], order: ASC }\n\t\t\tfilter: { fields: { markdownType: { eq: \"rules\" } } }\n\t\t) {\n\t\t\ttotalCount\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tfields {\n\t\t\t\t\t\tfileName {\n\t\t\t\t\t\t\trelativePath\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkdownType\n\t\t\t\t\t\tslug\n\t\t\t\t\t\tfastmatterAttributes\n\t\t\t\t\t}\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\trule_type\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n\n/**\n * Filter a given set of implementations based on consistency\n * @param {Array<Object>} items array of implementations\n * @param {Array<String>} values allowed values\n * @returns {Array<Object>}\n */\nexport function filterByConsistency(items, values) {\n\treturn items.filter(({ consistency }) => {\n\t\treturn values.includes(consistency)\n\t})\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport ListOfImplementations from '../components/list-of-implementations'\nimport { filterByConsistency } from './implementer'\nimport AccessibilityRequirements from '../components/accessibility_requirements'\nimport RuleHeader from '../components/rule-header'\nimport Badge from '../components/badge'\n\nimport './implementer-incomplete.scss'\n\nconst ImplementerIncomplete = ({ location, data }) => {\n\tconst { implementerData } = data.sitePage.context\n\tconst { organisation, toolName, actMapping, description } = JSON.parse(implementerData)\n\n\tconst title = `Incomplete implementations report of ${toolName} (${organisation})`\n\tconst completeMaps = filterByConsistency(actMapping, ['consistent', 'partially-consistent'])\n\tconst incompleteMaps = filterByConsistency(actMapping, ['inconsistent'])\n\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO title={title} />\n\t\t\t<section className=\"page-implementer-incomplete\">\n\t\t\t\t{/* title  */}\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t{/* desc  */}\n\t\t\t\t{description && <p>{description}</p>}\n\t\t\t\t{/* impl  */}\n\t\t\t\t{data.allRules.edges.map(({ node }) => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tfrontmatter: { id, name, rule_type },\n\t\t\t\t\t\tfields: { fastmatterAttributes },\n\t\t\t\t\t} = node\n\t\t\t\t\tconst { accessibility_requirements } = JSON.parse(fastmatterAttributes)\n\t\t\t\t\tconst ruleScs = Object.keys(accessibility_requirements || {})\n\t\t\t\t\t\t.filter(key => key.includes('wcag20') || key.includes('wcag21'))\n\t\t\t\t\t\t.map(key => key.split(':').pop())\n\t\t\t\t\t\t.map(sc => 'wcag' + sc.replace(/\\./g, ''))\n\t\t\t\t\tconst completeImpl = completeMaps.find(({ ruleId }) => ruleId === id)\n\t\t\t\t\tconst impl = incompleteMaps.find(({ ruleId }) => ruleId === id)\n\n\t\t\t\t\tif (completeImpl) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * When there is no complete implementation & SC's are not WCAG, list the accessibility requirements\n\t\t\t\t\t */\n\t\t\t\t\tif (!ruleScs.length) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"cardItem\" key={id} data-rule-id={id}>\n\t\t\t\t\t\t\t\t<RuleHeader ruleId={id} ruleName={name}>\n\t\t\t\t\t\t\t\t\t<Badge title={`Id:`} value={id} />\n\t\t\t\t\t\t\t\t\t<Badge title={`Type:`} value={rule_type} />\n\t\t\t\t\t\t\t\t</RuleHeader>\n\t\t\t\t\t\t\t\t<AccessibilityRequirements accessibility_requirements={accessibility_requirements} type=\"text\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!impl) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"cardItem\" key={id} data-rule-id={id}>\n\t\t\t\t\t\t\t\t<RuleHeader ruleId={id} ruleName={name}>\n\t\t\t\t\t\t\t\t\t<Badge title={`Id:`} value={id} />\n\t\t\t\t\t\t\t\t\t<Badge title={`Type:`} value={rule_type} />\n\t\t\t\t\t\t\t\t</RuleHeader>\n\t\t\t\t\t\t\t\t<AccessibilityRequirements accessibility_requirements={accessibility_requirements} type=\"text\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * show incomplete implementation tabulation\n\t\t\t\t\t */\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"cardItem\" key={id} data-rule-id={id}>\n\t\t\t\t\t\t\t<RuleHeader ruleId={id} ruleName={name}>\n\t\t\t\t\t\t\t\t<Badge title={`Id:`} value={id} />\n\t\t\t\t\t\t\t\t<Badge title={`Type:`} value={rule_type} />\n\t\t\t\t\t\t\t\t<Badge title={`Consistency:`} value={impl.consistency} />\n\t\t\t\t\t\t\t</RuleHeader>\n\t\t\t\t\t\t\t<ListOfImplementations mapping={[impl]} showIncomplete={true} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default ImplementerIncomplete\n\nexport const query = graphql`\n\tquery($path: String) {\n\t\tsitePage(path: { eq: $path }) {\n\t\t\tcontext {\n\t\t\t\tfilename\n\t\t\t\ttitle\n\t\t\t\timplementerData\n\t\t\t}\n\t\t}\n\t\tallRules: allMarkdownRemark(\n\t\t\tsort: { fields: [frontmatter___name], order: ASC }\n\t\t\tfilter: { fields: { markdownType: { eq: \"rules\" } } }\n\t\t) {\n\t\t\ttotalCount\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tfields {\n\t\t\t\t\t\tfileName {\n\t\t\t\t\t\t\trelativePath\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkdownType\n\t\t\t\t\t\tslug\n\t\t\t\t\t\tfastmatterAttributes\n\t\t\t\t\t}\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\trule_type\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport getHyphenatedString from '../../utils/get-hyphenated-string'\n\nconst TableTestcaseFindings = ({ ruleId, implementations = [], filter = defaultFilter }) => {\n\treturn (\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Testcase Url</th>\n\t\t\t\t\t<th>Expected</th>\n\t\t\t\t\t{implementations.map(({ implementationId }, index) => {\n\t\t\t\t\t\treturn <th key={`${implementationId}- ${index}`}>{implementationId}</th>\n\t\t\t\t\t})}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{Object.values(groupFindingsOfImplementations(ruleId, implementations, filter)).map(\n\t\t\t\t\t({ testcase, url, relativeUrl, expected, actuals }, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={`${url}-${index}`}>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<Link to={relativeUrl}>{testcase}</Link>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>{expected}</td>\n\t\t\t\t\t\t\t\t{implementations.map(({ implementationId }, index) => {\n\t\t\t\t\t\t\t\t\treturn <td key={`${implementationId}-${url}=${index}`}>{actuals[implementationId]}</td>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n\nTableTestcaseFindings.propTypes = {\n\truleId: PropTypes.string.isRequired,\n\timplementations: PropTypes.array.isRequired,\n\tfilter: PropTypes.func,\n}\n\nexport default TableTestcaseFindings\n\n/**\n * Group implmentation set data per testcase\n * @param {Array<Object>} implementations implementation set\n * @param {Function} filter filter fn\n * @returns {Object}\n */\nfunction groupFindingsOfImplementations(ruleId, implementations, filter) {\n\tconst result = {}\n\n\tconst filteredImplementations = implementations.filter(filter)\n\n\tfor (const { implementationId, findings } of filteredImplementations) {\n\t\tfor (const { url, testcase, expected, actual } of findings) {\n\t\t\tif (!result[testcase]) {\n\t\t\t\tresult[testcase] = {\n\t\t\t\t\turl,\n\t\t\t\t\ttestcase,\n\t\t\t\t\trelativeUrl: `/rules/${ruleId}/#${getHyphenatedString(testcase)}`,\n\t\t\t\t\texpected,\n\t\t\t\t\tactuals: {\n\t\t\t\t\t\t[implementationId]: actual,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult[testcase] = {\n\t\t\t\t\t...result[testcase],\n\t\t\t\t\tactuals: {\n\t\t\t\t\t\t...result[testcase].actuals,\n\t\t\t\t\t\t[implementationId]: actual,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * Default filter which returns everything\n */\nfunction defaultFilter() {\n\treturn true\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TableTestcaseFindings from './table-testcase-findings'\nimport Note from './note'\n\nconst ListOfImplementations = ({ mapping = [], showIncomplete = false }) => {\n\treturn (\n\t\t<div>\n\t\t\t{mapping.map(({ ruleId = '', implementations }) => (\n\t\t\t\t<div key={ruleId}>{getPageContent(implementations, showIncomplete, ruleId)}</div>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nListOfImplementations.propTypes = {\n\tmapping: PropTypes.array.isRequired,\n\tshowIncomplete: PropTypes.bool,\n}\n\nexport default ListOfImplementations\n\n/**\n *\n * @param {Object[]} implementations implementations\n * @param {Boolean} showIncomplete should show incomplete implementations\n * @param {String} ruleId rule id\n */\nfunction getPageContent(implementations, showIncomplete, ruleId) {\n\tif (!implementations || !implementations.length) {\n\t\treturn (\n\t\t\t<Note\n\t\t\t\tcls={`invalid`}\n\t\t\t\ttitle={`No Implementations`}\n\t\t\t\tbody={`No complete implemenations are provided. Kindly submit a new or amended implementation report.`}\n\t\t\t/>\n\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{showIncomplete ? (\n\t\t\t\t<>\n\t\t\t\t\t<Note\n\t\t\t\t\t\tcls={`invalid`}\n\t\t\t\t\t\ttitle={`Incomplete Implementation`}\n\t\t\t\t\t\tbody={`Listed below are the incomplete assertions. Kindly submit an amended implementation report.`}\n\t\t\t\t\t/>\n\t\t\t\t\t<TableTestcaseFindings\n\t\t\t\t\t\truleId={ruleId}\n\t\t\t\t\t\timplementations={implementations}\n\t\t\t\t\t\tfilter={({ consistency }) => consistency === `inconsistent`}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<TableTestcaseFindings\n\t\t\t\t\truleId={ruleId}\n\t\t\t\t\timplementations={implementations}\n\t\t\t\t\tfilter={({ consistency }) => consistency !== `inconsistent`}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './badge.scss'\n\nconst Badge = ({ title, value }) => {\n  return (\n    <div className='badge'>\n      <span className='title'>{title}</span>\n      <span>{value}</span>\n    </div>\n  )\n}\n\nBadge.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired\n}\n\nexport default Badge"],"sourceRoot":""}