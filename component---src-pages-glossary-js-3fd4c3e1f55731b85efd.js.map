{"version":3,"sources":["webpack:///./src/pages/glossary.js","webpack:///./src/utils/get-rules-for-glossary-key.js","webpack:///./src/components/list-with-heading.js"],"names":["converter","showdown","Converter","Glossary","location","useStaticQuery","glossaryData","allRules","useState","viewportSize","setViewportSize","queries","small","medium","large","onChange","matches","title","className","classnames","edges","map","node","frontmatter","html","ruleIdsUsingGlossaryKey","key","result","Object","entries","glossaryUsages","ruleId","includes","push","getRulesForGlossaryKey","items","filter","rule","id","href","dangerouslySetInnerHTML","__html","cls","headingTemplate","length","itemTemplate","item","makeHtml","name","ListWithHeading","defaultProps","heading"],"mappings":"yPAUMA,EAAY,IAAIC,IAASC,UAiHhBC,UA/GE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACCC,yBAAe,cAA1CC,EAD0B,EAC1BA,aAAcC,EADY,EACZA,SADY,EA6CMC,mBAAS,IAA1CC,EA7C2B,KA6CbC,EA7Ca,KA0DlC,OACC,kBAAC,IAAD,CAAQN,SAAUA,GACjB,kBAAC,IAAD,CACCO,QAAS,CACRC,MAAO,qBACPC,OAAQ,6CACRC,MAAO,uBAERC,SApBwB,SAAAC,GAC1B,OAAIA,EAAQJ,MACJF,EAAgB,MAGpBM,EAAQH,OACJH,EAAgB,MAGjBA,EAAgB,SAatB,kBAAC,IAAD,CAAKO,MAAM,aACX,6BAASC,UAAU,iBAClB,wCACA,6BAASA,UAAWC,IAAW,UAAWV,IACxCH,EAAac,MAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAClBC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KACfC,ECpF0B,SAAAC,GAErC,IADA,IAAMC,EAAS,GACf,MAAqCC,OAAOC,QAAQC,GAApD,eAAqE,CAAC,IAAD,OAAzDC,EAAyD,UACnDC,SAASN,IACzBC,EAAOM,KAAKF,GAGd,OAAOJ,ED6E8BO,CAAuB,IAAIX,EAAYG,KACjES,EAAQ5B,EAASa,MAAMgB,QAAO,SAAAC,GAAI,OAAIZ,EAAwBO,SAASK,EAAKf,KAAKC,YAAYe,OACnG,OACC,6BAASZ,IAAKH,EAAYG,KAEzB,iCACC,uBAAGY,GAAIf,EAAYG,IAAKa,KAAI,IAAMhB,EAAYG,KAC7C,4BAAKH,EAAYN,QAElB,yBAAKuB,wBAAyB,CAAEC,OAAQjB,MAGzC,kBAAC,IAAD,CACCkB,IAAG,aACHC,gBAAiB,kBAAM,+CAAqBR,EAAQA,EAAMS,OAAS,IAA5C,MACvBC,aAAc,SAAAC,GAAI,OACjB,wBAAIpB,IAAKoB,EAAKxB,KAAKC,YAAYe,IAC9B,uBAAGC,KAAI,UAAYO,EAAKxB,KAAKC,YAAYe,IACxC,0BACCE,wBAAyB,CACxBC,OAAQzC,EAAU+C,SAASD,EAAKxB,KAAKC,YAAYyB,YAMtDb,MAAOA,a,2DEhHhB,yBAGMc,EAAkB,SAAC,GAAwD,IAAtDP,EAAqD,EAArDA,IAAKC,EAAgD,EAAhDA,gBAAiBE,EAA+B,EAA/BA,aAA+B,IAAjBV,aAAiB,MAAT,GAAS,EAC/E,OACC,yBAAKjB,UAAWwB,GAEdC,MAEER,IAAUA,EAAMS,SAAW,yBAAK1B,UAAU,QAAf,WAE7BiB,EAAMS,OAAS,GAAK,4BAAKT,EAAMd,KAAI,SAAAyB,GAAI,OAAID,EAAaC,SAY5DG,EAAgBC,aAAe,CAC9BR,IAAI,GACJS,QAAQ,GACRhB,MAAO,IAGOc,O","file":"component---src-pages-glossary-js-3fd4c3e1f55731b85efd.js","sourcesContent":["import './glossary.scss'\nimport React, { useState } from 'react'\nimport classnames from 'classnames'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport ReactMedia from 'react-media'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport ListWithHeading from '../components/list-with-heading'\nimport showdown from 'showdown'\nimport { getRulesForGlossaryKey } from '../utils/get-rules-for-glossary-key'\nconst converter = new showdown.Converter()\n\nconst Glossary = ({ location }) => {\n\tconst { glossaryData, allRules } = useStaticQuery(\n\t\tgraphql`\n\t\t\tquery {\n\t\t\t\tglossaryData: allMarkdownRemark(\n\t\t\t\t\tsort: { fields: [frontmatter___title], order: ASC }\n\t\t\t\t\tfilter: { fields: { markdownType: { eq: \"glossary\" } } }\n\t\t\t\t) {\n\t\t\t\t\tedges {\n\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\thtml\n\t\t\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfields {\n\t\t\t\t\t\t\t\tmarkdownType\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texcerpt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tallRules: allMarkdownRemark(filter: { fields: { markdownType: { eq: \"rules\" } } }) {\n\t\t\t\t\ttotalCount\n\t\t\t\t\tedges {\n\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\tfields {\n\t\t\t\t\t\t\t\tfileName {\n\t\t\t\t\t\t\t\t\trelativePath\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmarkdownType\n\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`\n\t)\n\n\tconst [viewportSize, setViewportSize] = useState(``)\n\tconst onMediaQueryChange = matches => {\n\t\tif (matches.small) {\n\t\t\treturn setViewportSize(`sm`)\n\t\t}\n\n\t\tif (matches.medium) {\n\t\t\treturn setViewportSize(`md`)\n\t\t}\n\n\t\treturn setViewportSize(`lg`)\n\t}\n\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<ReactMedia\n\t\t\t\tqueries={{\n\t\t\t\t\tsmall: '(max-width: 599px)',\n\t\t\t\t\tmedium: '(min-width: 600px) and (max-width: 1199px)',\n\t\t\t\t\tlarge: '(min-width: 1200px)',\n\t\t\t\t}}\n\t\t\t\tonChange={onMediaQueryChange}\n\t\t\t/>\n\t\t\t<SEO title=\"Glossary\" />\n\t\t\t<section className=\"page-glossary\">\n\t\t\t\t<h1>Glossary</h1>\n\t\t\t\t<section className={classnames('listing', viewportSize)}>\n\t\t\t\t\t{glossaryData.edges.map(({ node }) => {\n\t\t\t\t\t\tconst { frontmatter, html } = node\n\t\t\t\t\t\tconst ruleIdsUsingGlossaryKey = getRulesForGlossaryKey(`#${frontmatter.key}`)\n\t\t\t\t\t\tconst items = allRules.edges.filter(rule => ruleIdsUsingGlossaryKey.includes(rule.node.frontmatter.id))\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<article key={frontmatter.key}>\n\t\t\t\t\t\t\t\t{/* glossary item  */}\n\t\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t\t<a id={frontmatter.key} href={`#${frontmatter.key}`}>\n\t\t\t\t\t\t\t\t\t\t<h2>{frontmatter.title}</h2>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: html }} />\n\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t{/* list of rules using glossary item  */}\n\t\t\t\t\t\t\t\t<ListWithHeading\n\t\t\t\t\t\t\t\t\tcls={`used-rules`}\n\t\t\t\t\t\t\t\t\theadingTemplate={() => <h3>Used In Rules: ({items ? items.length : '0'})</h3>}\n\t\t\t\t\t\t\t\t\titemTemplate={item => (\n\t\t\t\t\t\t\t\t\t\t<li key={item.node.frontmatter.id}>\n\t\t\t\t\t\t\t\t\t\t\t<a href={`/rules/${item.node.frontmatter.id}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t__html: converter.makeHtml(item.node.frontmatter.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\titems={items}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</article>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</section>\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default Glossary\n","import glossaryUsages from '../../_data/glossary-usages.json'\n\nexport const getRulesForGlossaryKey = key => {\n\tconst result = []\n\tfor (const [ruleId, glossaryKeys] of Object.entries(glossaryUsages)) {\n\t\tif (glossaryKeys.includes(key)) {\n\t\t\tresult.push(ruleId)\n\t\t}\n\t}\n\treturn result\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ListWithHeading = ({ cls, headingTemplate, itemTemplate, items = [] }) => {\n\treturn (\n\t\t<div className={cls}>\n\t\t\t{/* title  */}\n\t\t\t{headingTemplate()}\n\t\t\t{/* when there are no items, show a no data note  */}\n\t\t\t{(!items || !items.length) && <div className=\"note\">No Data</div>}\n\t\t\t{/* render items if they exist  */}\n\t\t\t{items.length > 0 && <ul>{items.map(item => itemTemplate(item))}</ul>}\n\t\t</div>\n\t)\n}\n\nListWithHeading.propTypes = {\n\tcls: PropTypes.string,\n\theadingTemplate: PropTypes.func.isRequired,\n\titemTemplate: PropTypes.func.isRequired,\n\titems: PropTypes.array,\n}\n\nListWithHeading.defaultProps = {\n\tcls: ``,\n\theading: ``,\n\titems: [],\n}\n\nexport default ListWithHeading\n"],"sourceRoot":""}